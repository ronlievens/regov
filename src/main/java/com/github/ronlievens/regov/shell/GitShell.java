package com.github.ronlievens.regov.shell;

import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import lombok.val;
import org.apache.commons.lang3.StringUtils;

import java.nio.file.Path;


@RequiredArgsConstructor
@Slf4j
public class GitShell {

    private final Shell shell;

    public String getCurrentBranchInLocalRepository(@NonNull final Path path, final boolean trace) {
        val result = shell.execute("git branch --show-current", path, trace);
        if (result.exitCode() == 0) {
            return result.value();
        }
        return null;
    }

    public boolean cloneTo(@NonNull final String url, @NonNull final Path target, final boolean trace) {
        return shell.execute("git clone %s %s".formatted(url, target.toAbsolutePath()), trace).exitCode() == 0;
    }

    public void checkoutFeatureBranchLocal(@NonNull final String branchName, @NonNull final Path path, final boolean trace) {
        shell.execute("git checkout -B %s".formatted(branchName), path, trace);
    }

    public void pullRemoteBranch(String brancheName, @NonNull final Path path, final boolean trace) {
        if (StringUtils.isNotBlank(brancheName)) {
            shell.execute("git branch --set-upstream-to=origin/%s".formatted(brancheName), path, trace);
        }
        shell.execute("git pull", path, trace);
    }

    public boolean commit(@NonNull final String commitMessage, @NonNull final Path path, final boolean trace) {
        var result = shell.execute("git add --all", path, trace).exitCode();
        result += shell.execute("git commit -q -m \"%s - generated by ReGov\"".formatted(commitMessage), path, trace).exitCode();
        return result == 0;
    }

    public boolean push(@NonNull final Path path, final boolean trace) {
        return shell.execute("git push -u origin --all", path, trace).exitCode() == 0;
    }
}
